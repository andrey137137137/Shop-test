@mixin breakpoint($value, $mediaType: 'min') {
  $breakpoints: (
    'md': withPx($mdWidth),
    'lg': withPx($lgWidth),
    'xl': withPx($xlWidth),
  );

  @media (#{$mediaType}-width: map-get($breakpoints, $value)) {
    @content;
  }
}

@mixin minMd {
  @include breakpoint('md') {
    @content;
  }
}

@mixin minLg {
  @include breakpoint('lg') {
    @content;
  }
}

@mixin minXl {
  @include breakpoint('xl') {
    @content;
  }
}

@mixin maxMd {
  @include breakpoint('md', 'max') {
    @content;
  }
}

@mixin maxLg {
  @include breakpoint('lg', 'max') {
    @content;
  }
}

@mixin maxXl {
  @include breakpoint('xl', 'max') {
    @content;
  }
}

@mixin anyHover {
  @media (any-hover: hover) {
    @content;
  }
}

@mixin fonts($fontFamily, $weight: normal, $style: normal) {
  @font-face {
    font-family: $fontFamily;
    src: url('#{$fontsPath}/#{$fontFamily}/#{$fontFamily}.eot');
    src: url('#{$fontsPath}/#{$fontFamily}/#{$fontFamily}.eot?#iefix')
        format('embedded-opentype'),
      // url('#{$fontsPath}/#{$fontFamily}/#{$fontFamily}.woff2') format('woff2'),
        url('#{$fontsPath}/#{$fontFamily}/#{$fontFamily}.woff') format('woff'),
      url('#{$fontsPath}/#{$fontFamily}/#{$fontFamily}.ttf') format('truetype');
    font-weight: $weight;
    font-style: $style;
  }
}

@mixin cssProp($property, $value) {
  #{$property}: unquote($value);
}

@mixin margin($value) {
  // margin: unquote($value);
  @include cssProp(margin, $value);
}

@mixin border($value) {
  // border: unquote($value);
  @include cssProp(border, $value);
}

@mixin borderTopRadius($value) {
  // border-top-radius: unquote($value);
  @include cssProp('border-top-radius', $value);
}

@mixin borderRightRadius($value) {
  // border-right-radius: unquote($value);
  @include cssProp('border-right-radius', $value);
}

@mixin borderBottomRadius($value) {
  // border-bottom-radius: unquote($value);
  @include cssProp('border-bottom-radius', $value);
}

@mixin borderLeftRadius($value) {
  // border-left-radius: unquote($value);
  @include cssProp('border-left-radius', $value);
}

@mixin padding($value) {
  // padding: unquote($value);
  @include cssProp(padding, $value);
}

@mixin size($value) {
  // size: unquote($value);
  @include cssProp(size, $value);
}

@mixin position($value) {
  @include cssProp(position, $value);
}

@mixin transition($prop) {
  transition: unquote($prop) $trsTime ease 0s;
}

@mixin adaptiveProp($prop, $min, $max, $mediaType: '') {
  $result: adaptiveValue($min, $max);

  @if ($mediaType == 'min' or $mediaType == 'max') {
    #{$prop}: withPx($max);

    @media (#{$mediaType}-width: withPx($maxWidth)) {
      #{$prop}: $result;
    }
  } @else {
    #{$prop}: $result;
  }
}

@mixin transitionAll {
  @include transition('all');
}

@mixin positionTopLeft($type, $top: 0, $left: 0) {
  @include position('#{$type} #{$top} * * #{$left}');
}

@mixin positionWithFullWidth($type, $width, $height: '') {
  @include positionTopLeft($type, $top: 0, $left: 0);

  @if $height == '' {
    width: $width;
  } @else {
    @include size('#{$width} #{$height}');
  }
}

@mixin fixedElem($height: '') {
  @include positionWithFullWidth(fixed, 100%, $height);
}

@mixin absoluteElem($height: '') {
  @include positionWithFullWidth(absolute, 100%, $height);
}

@mixin flexOn($alignItems: '', $justifyContent: '', $isWrap: '') {
  display: flex;

  @if $alignItems {
    @include cssProp('align-items', $alignItems);
  }

  @if $justifyContent {
    @include cssProp('justify-content', $justifyContent);
  }

  @if $isWrap {
    @include cssProp('flex-wrap', $isWrap);
  }
}

@mixin inlineFontSize($size, $height) {
  font-size: withPx($size);
  line-height: toPercent($height, $size);
}

@mixin inlineBlock($fontSize, $height, $border: 0) {
  height: $height;
  @include inlineFontSize($fontSize, $height - $border * 2);
}

@mixin btn($fontSize, $height, $borderWidth: 0, $borderColor: unset) {
  @if $borderWidth {
    border: $borderWidth solid $borderColor;
  }

  @include inlineBlock($fontSize, $height, $borderWidth);
}

@mixin percentsToOpacity($percents) {
  // $percents: $value*100/$max;
  opacity: $percents * 0.01;
}

@mixin widthToPercents($value, $total) {
  $per: $value * 100%;
  // $total: $total - 2 * $totalPadding;

  width: calc(#{$per}/#{$total});
}

@mixin pixelPerfect($page: '', $top: 0) {
  #pixel_perfect {
    $img: '#{$page}.png';

    @include positionTopLeft('absolute', $top);
    // top: -194px;
    // top: $top;
    // left: 0;
    z-index: $zMax;
    size: 100%;
    background: url(~@/assets/img/#{$img}) center top repeat-y;
    // background-size: cover;
    background-attachment: scroll;
    opacity: 0.5;
  }
}
